pipeline {
    agent any
    
    environment {
        APP_DIR = '/app'
        EXTERNAL_IP = sh(script: 'curl -s ifconfig.me', returnStdout: true).trim()
    }
    
    stages {
        stage('Cloning') {
            steps {
                echo "Cloning"
                git url: "https://github.com/ifeelpankaj/prod-root.git",
                branch: "master"
            }
        }
        
        stage('Setup Client Environment') {
            steps {
                dir('prod-client') {
                    sh '''
                        #!/bin/bash
                        touch .env
                        cp ${APP_DIR}/.env .env
                        sed -i "s|VITE_SERVER=http://localhost:4000|VITE_SERVER=http://${EXTERNAL_IP}:4000|g" .env
                    '''
                }
            }
        }
        
        stage('Setup Admin Environment') {
            steps {
                dir('prod-admin') {
                    sh '''
                        #!/bin/bash
                        touch .env
                        cp ${APP_DIR}/.env .env
                        sed -i "s|VITE_SERVER=http://localhost:4000|VITE_SERVER=http://${EXTERNAL_IP}:4000|g" .env
                    '''
                }
            }
        }
        stage('Setup Server Environment') {
            steps {
                dir('prod-server') {
                    sh '''
                        #!/bin/bash
                        touch .env.development .env.production
                        cp ${APP_DIR}/.env.development .env.development
                        cp ${APP_DIR}/.env.production .env.production

                        # Update ALLOWED_ORIGINS to include both ports 4173 and 4174 with external IP
                        sed -i "s|ALLOWED_ORIGINS=http://localhost:4173|ALLOWED_ORIGINS=http://${EXTERNAL_IP}:4173,http://${EXTERNAL_IP}:4174|g" .env.production
                    '''

                }
            }
        }
        
        stage('Deploy with Docker') {
            steps {
                sh 'docker compose down && docker compose up --build -d'
            }
        }
    }
    
    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}