pipeline {
    agent any

    environment {
        APP_DIR = '/app'
        EXTERNAL_IP = sh(script: 'curl -s ifconfig.me', returnStdout: true).trim()
    }

    stages {
        stage('Cloning') {
            steps {
                echo 'Cloning Git Repo'
                git url: 'https://github.com/ifeelpankaj/prod-root.git',
                branch: 'master'
            }
        }
        stage('Prepare MongoDB Keyfile') {
            steps {
                sh '''
                    mkdir -p mongo-keyfile
                    openssl rand -base64 756 > mongo-keyfile/mongodb-keyfile
                    chmod 400 mongo-keyfile/mongodb-keyfile
                '''
            }
        }
        stage('Setup Client Environment') {
            steps {
                dir('prod-client') {
                    sh '''
                        #!/bin/bash
                        touch .env
                        cp ${APP_DIR}/.env .env
                        sed -i "s|VITE_SERVER=http://localhost:4000|VITE_SERVER=http://${EXTERNAL_IP}:4000|g" .env
                    '''
                }
            }
        }

        stage('Setup Admin Environment') {
            steps {
                dir('prod-admin') {
                    sh '''
                        #!/bin/bash
                        touch .env
                        cp ${APP_DIR}/.env .env
                        sed -i "s|VITE_SERVER=http://localhost:4000|VITE_SERVER=http://${EXTERNAL_IP}:4000|g" .env
                    '''
                }
            }
        }
        stage('Setup Server Environment') {
            steps {
                dir('prod-server') {
                    sh '''
                        #!/bin/bash
                        touch .env.development .env.production
                        cp ${APP_DIR}/.env.development .env.development
                        cp ${APP_DIR}/.env.production .env.production

                        sed -i '/^ALLOWED_ORIGINS=/s|localhost|'${EXTERNAL_IP}'|g' .env.production
                        sed -i '/^ALLOWED_ORIGINS=/s|localhost|'${EXTERNAL_IP}'|g' .env.development
                    '''
                }
            }
        }

        stage('Deploy with Docker') {
            steps {
                sh '''
            # Clean up existing containers and volumes
            docker compose down --volumes --remove-orphans
            docker builder prune -f

            # Build without cache
            docker compose build --no-cache

            # Start core services first
            docker compose up -d mongodb

            # Wait for MongoDB to be healthy
            echo "Waiting for MongoDB to be healthy..."
            timeout 120 sh -c 'until docker compose ps mongodb | grep -q "healthy"; do sleep 5; done'

            # Initialize replica set
            docker compose up mongodb-init --abort-on-container-exit

            # Start remaining services
            docker compose up -d backend frontend admin

            # Verify all services are running
            docker compose ps
        '''
            }
        }
    }

    post {
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Please check the logs for details.'
        }
    }
}
