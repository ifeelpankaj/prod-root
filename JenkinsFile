pipeline {
    agent any
    
    environment {
        APP_DIR = '/app'
        EXTERNAL_IP = sh(script: 'curl -s ifconfig.me', returnStdout: true).trim()
    }
    
    stages {
        stage('Cloning') {
            steps {
                echo "Cloning your app"
                git url: "https://github.com/ifeelpankaj/prod-root.git",
                branch: "master"
            }
        }
        stage('System Prerequisites') {
            steps {
                sh '''
                    echo "Setting up system requirements for ELK Stack..."
                    
                    # Set vm.max_map_count for Elasticsearch (required)
                    sudo sysctl -w vm.max_map_count=262144
                    
                    # Make it persistent
                    if ! grep -q "vm.max_map_count=262144" /etc/sysctl.conf; then
                        echo "vm.max_map_count=262144" |sudo tee -a /etc/sysctl.conf
                    fi
                    
                    # Check system resources
                    echo "System Resources:"
                    free -h
                    df -h .
                '''
            }
        }
        stage('Verify ELK Configuration') {
            steps {
                sh '''
                    echo "Verifying ELK Stack configuration files..."

                    # Check if configuration files exist
                    if [ ! -f "filebeat/filebeat.yml" ]; then
                        echo "ERROR: filebeat/filebeat.yml not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "logstash/config/logstash.yml" ]; then
                        echo "ERROR: logstash/config/logstash.yml not found!"
                        exit 1
                    fi
                    
                    if [ ! -f "logstash/pipeline/logstash.conf" ]; then
                        echo "ERROR: logstash/pipeline/logstash.conf not found!"
                        exit 1
                    fi
                    
                    # Set proper permissions
                    chmod 644 filebeat/filebeat.yml
                    chmod 644 logstash/config/logstash.yml
                    chmod 644 logstash/pipeline/logstash.conf
                    
                    echo "All ELK configuration files found and permissions set!"
                    echo "Configuration files:"
                    ls -la filebeat/
                    ls -la logstash/config/
                    ls -la logstash/pipeline/
                '''
            }
        }
        stage('Prepare MongoDB Keyfile') {
            steps {
                sh '''
                    # Create directory
                    mkdir -p mongo-keyfile
                    
                    # Generate keyfile using Docker (avoids permission issues)
                    docker run --rm -v $(pwd)/mongo-keyfile:/keyfile alpine:latest sh -c "
                        apk add --no-cache openssl &&
                        openssl rand -base64 756 > /keyfile/mongodb-keyfile &&
                        chmod 400 /keyfile/mongodb-keyfile &&
                        chown 999:999 /keyfile/mongodb-keyfile
                    "
                '''
            }
        }
        stage('Setup Client Environment') {
            steps {
                dir('prod-client') {
                    sh '''
                        #!/bin/bash
                        touch .env
                        cp ${APP_DIR}/.env .env
                        sed -i "s|VITE_SERVER=http://localhost:4000|VITE_SERVER=https://api.4biddencoder.tech|g"  .env
                        sed -i "s|VITE_SERVER=http://.*|VITE_SERVER=https://api.4biddencoder.tech|g" .env   
                    '''
                }
            }
        }
        
        stage('Setup Admin Environment') {
            steps {
                dir('prod-admin') {
                    sh '''
                        #!/bin/bash
                        touch .env
                        cp ${APP_DIR}/.env .env
                        sed -i "s|VITE_SERVER=http://localhost:4000|VITE_SERVER=https://api.4biddencoder.tech|g" .env
                        sed -i "s|VITE_SERVER=http://.*|VITE_SERVER=https://api.4biddencoder.tech|g" .env
                    '''
                }
            }
        }
        stage('Setup Server Environment') {
            steps {
                dir('prod-server') {
                    sh '''
                        #!/bin/bash
                        touch .env.development .env.production
                        cp ${APP_DIR}/.env.development .env.development
                        cp ${APP_DIR}/.env.production .env.production
                        
                        sed -i 's|ALLOWED_ORIGINS=.*|ALLOWED_ORIGINS=https://4biddencoder.tech,https://www.4biddencoder.tech,https://admin.4biddencoder.tech|g' .env.production
                        sed -i 's|ALLOWED_ORIGINS=.*|ALLOWED_ORIGINS=https://4biddencoder.tech,https://www.4biddencoder.tech,https://admin.4biddencoder.tech|g' .env.development
                    '''
                }
            }
        }
        
        stage('Deploy with Docker') {
            steps {
                sh '''
                    echo "Deploying application with ELK Stack..."
                    
                    # Use Docker to create logs directory with proper permissions
                    echo "Setting up logs directory using Docker..."
                    
                    # Use alpine container to create logs directory
                    docker run --rm \
                        -v $(pwd)/prod-server:/app \
                        -w /app \
                        alpine:latest \
                        sh -c "
                            mkdir -p logs && 
                            touch logs/production.log logs/development.log && 
                            chmod -R 777 logs &&
                            ls -la logs/
                        "
                    
                    echo "Logs directory created successfully using Docker"
                    # Clean up existing containers and volumes
                    docker compose down --remove-orphans
                    docker builder prune -f
                    
                    # Build without cache
                    docker compose build --no-cache
                    
                    # Start MongoDB first
                    echo "Starting MongoDB..."
                    docker compose up -d mongodb
                    
                    # Wait for MongoDB to be healthy
                    echo "Waiting for MongoDB to be healthy..."
                    timeout 120 sh -c 'until docker compose ps mongodb | grep -q "healthy"; do sleep 5; done'
                    
                    # Initialize replica set
                    echo "Initializing MongoDB replica set..."
                    docker compose up mongodb-init --abort-on-container-exit
                    
                    # Start Elasticsearch first (it takes longest to start)
                    echo "Starting Elasticsearch..."
                    docker compose up -d elasticsearch
                    
                    # Wait for Elasticsearch to be healthy
                    echo "Waiting for Elasticsearch to be healthy (this may take 2-3 minutes)..."
                    timeout 300 sh -c 'until docker compose ps elasticsearch | grep -q "healthy"; do sleep 10; done'
                    
                    # Start remaining ELK services
                    echo "Starting Logstash and Kibana..."
                    docker compose up -d logstash kibana filebeat
                    
                    # Start application services
                    echo "Starting application services..."
                    docker compose up -d backend frontend admin
                    
                    # Wait a moment for services to stabilize
                    sleep 30
                    
                    # Verify all services are running
                    echo "Verifying all services..."
                    docker compose ps
                    
                    # Check ELK Stack health
                    echo "Checking ELK Stack health..."
                    timeout 60 sh -c 'until curl -s http://localhost:9200/_cluster/health | grep -q "yellow\\|green"; do sleep 5; done' || echo "Elasticsearch not fully ready yet"
                    timeout 60 sh -c 'until curl -s http://localhost:5601/api/status | grep -q "available"; do sleep 5; done' || echo "Kibana not fully ready yet"
                '''
            }
        }
        stage('Post-Deployment Health Check') {
            steps {
                sh '''
                    echo "Performing post-deployment health checks..."
                    
                    # Check application services
                    echo "Application Health:"
                    curl -f http://localhost:4000/api/v1/system/health || echo "Backend health check failed"
                    curl -f http://localhost:4173 || echo "Frontend health check failed"
                    curl -f http://localhost:4174 || echo "Admin health check failed"
                    
                    # Check ELK Stack
                    echo "ELK Stack Health:"
                    curl -s http://localhost:9200/_cluster/health | jq '.' || echo "Elasticsearch not responding"
                    curl -s http://localhost:9200/_cat/indices?v || echo "No indices created yet"
                    curl -s http://localhost:5601/api/status || echo "Kibana not responding"
                    
                    # Check if logs are being processed
                    echo "Log Processing Status:"
                    docker compose logs --tail=20 filebeat
                    docker compose logs --tail=20 logstash
                    
                    echo "Deployment complete!"
                    echo "Local Access URLs (for testing):"
                    echo "- Frontend: http://${EXTERNAL_IP}:4173"
                    echo "- Admin Panel: http://${EXTERNAL_IP}:4174"
                    echo "- API: http://${EXTERNAL_IP}:4000"
                    echo "- Kibana Dashboard: http://${EXTERNAL_IP}:5601"
                    echo ""
                    echo "Public URLs (via Load Balancer - may take 5-10 minutes to be ready):"
                    echo "- Main Site: https://www.4biddencoder.tech"
                    echo "- Admin Panel: https://admin.4biddencoder.tech"
                    echo "- API: https://api.4biddencoder.tech"
                '''
            }
        }
    }

    
    post {
        success {
            echo '''
            🎉 Pipeline executed successfully!
            
            Your application and ELK Stack are now running:
            - Kibana Dashboard: Create index pattern "backend-logs-*" 
            - Monitor your Winston logs in real-time
            - Set up alerts and dashboards as needed
            '''
        }
        failure {
            sh '''
                echo "Pipeline failed. Collecting debug information..."
                echo "Docker Services Status:"
                docker compose ps
                
                echo "ELK Stack Logs:"
                docker compose logs elasticsearch | tail -50
                docker compose logs logstash | tail -50
                docker compose logs filebeat | tail -50
                
                echo "Application Logs:"
                docker compose logs backend | tail -50
            '''
            echo 'Pipeline failed. Please check the logs above for details.'
        }
        always {
            sh '''
                echo "Cleanup: Removing unused Docker resources..."
                docker system prune -f --volumes || true
            '''
        }
    }
}
