input {
  beats {
    port => 5044
  }
}

filter {
  # Handle Winston's pretty-printed JSON
  if [message] {
    json {
      source => "message"
      target => "winston_data"
    }
  }

  # Use Winston's structured data
  if [winston_data] {
    mutate {
      add_field => { "log_level" => "%{[winston_data][level]}" }
      add_field => { "log_message" => "%{[winston_data][message]}" }
      add_field => { "winston_timestamp" => "%{[winston_data][timestamp]}" }
    }

    # Parse Winston's custom timestamp
    if [winston_timestamp] {
      date {
        match => [ "winston_timestamp", "dd MMM yyyy HH:mm" ]
        timezone => "Asia/Kolkata"
        target => "@timestamp"
      }
    }

    # Handle Winston's meta field with error objects
    if [winston_data][meta] {
      ruby {
        code => "
          meta = event.get('[winston_data][meta]')
          if meta.is_a?(Hash)
            meta.each do |key, value|
              if value.is_a?(Hash) && value['name'] && value['message']
                event.set('error_name', value['name'])
                event.set('error_message', value['message'])
                event.set('error_stack', value['trace']) if value['trace']
                event.set('has_error', true)
              end
              event.set(key, value)
            end
          end
        "
      }
    }
  }

  # Add service information
  mutate {
    add_field => { "service" => "backend" }
    add_field => { "application" => "prod-server" }
  }

  # Set environment based on file path
  if [log][file][path] =~ /development\.log$/ {
    mutate {
      add_field => { "environment" => "development" }
    }
  } else if [log][file][path] =~ /production\.log$/ {
    mutate {
      add_field => { "environment" => "production" }
    }
  }

  # Clean up
  mutate {
    remove_field => [ "host", "agent", "ecs", "input", "message", "winston_data" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "backend-logs-%{+YYYY.MM.dd}"
  }

  # Keep debug output for troubleshooting
  stdout {
    codec => rubydebug
  }
}