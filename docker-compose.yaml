services:
  frontend:
    build:
      context: ./prod-client
      dockerfile: Dockerfile
    ports:
      - "4173:4173"
    depends_on:
      - backend
    env_file:
      - ./prod-client/.env
    networks:
      - app-network

  admin:
    build:
      context: ./prod-admin
      dockerfile: Dockerfile
    ports:
      - "4174:4173" # Different host port to avoid conflicts
    depends_on:
      - backend
    env_file:
      - ./prod-admin/.env
    networks:
      - app-network

  backend:
    build:
      context: ./prod-server
      dockerfile: Dockerfile
    ports:
      - "4000:4000"
    depends_on:
      mongodb:
        condition: service_healthy
    env_file:
      - ./prod-server/.env.development
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    restart: unless-stopped

  mongodb:
    image: mongo:7.0
    container_name: mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: prod-db
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./mongo-keyfile:/opt/keyfile:ro
    networks:
      - app-network
    # Enable replica set for transactions
    command: >
      mongod --auth 
      --replSet rs0 
      --bind_ip_all 
      --keyFile /opt/keyfile/mongodb-keyfile
    healthcheck:
      test:
        [
          "CMD",
          "mongosh",
          "--port",
          "27017",
          "--quiet",
          "--eval",
          "db.adminCommand('ping')",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 40s

  # Separate service to initialize replica set
  mongodb-init:
    image: mongo:7.0
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - app-network
    command: >
      mongosh --host mongodb:27017 --eval "
        try {
          rs.status();
          print('Replica set already initialized');
        } catch (e) {
          if (e.message.includes('no replset config has been received')) {
            print('Initializing replica set...');
            rs.initiate({
              _id: 'rs0',
              members: [{ _id: 0, host: 'mongodb:27017' }]
            });
            print('Replica set initialized successfully');
          } else {
            print('Error: ' + e.message);
            quit(1);
          }
        }
      "
    restart: "no"

networks:
  app-network:
    driver: bridge

volumes:
  mongodb_data:
    driver: local
  mongodb_config:
    driver: local
